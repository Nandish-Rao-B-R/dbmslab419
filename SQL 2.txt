CREATE TABLE SALESMAN(SALESMAN_ID NUMBER(4),NAME VARCHAR2(20),CITY VARCHAR2(20),COMMISSION VARCHAR2(20),PRIMARY KEY(SALESMAN_ID));

CREATE TABLE CUSTOMER(CUSTOMER_ID NUMBER(4),CUST_NAME VARCHAR2(20),CITY VARCHAR2(20),GRADE NUMBER(3),PRIMARY KEY(CUSTOMER_ID),SALESMAN_ID REFERENCES SALESMAN(SALESMAN_ID) ON DELETE SET NULL);

CREATE TABLE ORDERS(ORD_NO NUMBER(5),PURCHASE_AMT NUMBER(10,2),ORD_DATE DATE,PRIMARY KEY(ORD_NO),CUSTOMER_ID REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
                                               SALESMAN_ID REFERENCES SALESMAN(SALESMAN_ID) ON DELETE CASCADE);



INSERT INTO SALESMAN VALUES(1000,'JOHN','BANGALORE','25%');
INSERT INTO SALESMAN VALUES(2000,'RAVI','BANGALORE','20%');
INSERT INTO SALESMAN VALUES(3000,'KUMAR','MYSORE','15%');
INSERT INTO SALESMAN VALUES(4000,'SMITH','DELHI','30%');
INSERT INTO SALESMAN VALUES(1234,'HARSHA','HYDERABAD','15%');

SELECT * FROM SALESMAN;

INSERT INTO CUSTOMER VALUES(10,'PREETHI','BANGALORE',100,1000);
INSERT INTO CUSTOMER VALUES(11,'VIVEK','MANGALORE',300,1000);
INSERT INTO CUSTOMER VALUES(12,'BHASKAR','CHENNAI',400,2000);
INSERT INTO CUSTOMER VALUES(13,'CHETHAN','BANGALORE',200,2000);
INSERT INTO CUSTOMER VALUES(14,'MAMATHA','BANGALORE',400,3000);
INSERT INTO CUSTOMER VALUES(15,'RAKSHA','BANGALORE',500,1234);

SELECT * FROM CUSTOMER;

INSERT INTO ORDERS VALUES(50,5000,'04-MAY-17',10,1000);
INSERT INTO ORDERS VALUES(51,450,'20-JAN-17',10,2000);
INSERT INTO ORDERS VALUES(52,1000,'24-FEB-17',13,2000);
INSERT INTO ORDERS VALUES(53,3500,'13-APR-17',14,3000);
INSERT INTO ORDERS VALUES(54,550,'09-MAR-17',12,2000);
INSERT INTO ORDERS VALUES(55,650,'19-MAR-17',15,1234);

SELECT * FROM ORDERS;

SELECT GRADE,COUNT(DISTINCT CUSTOMER_ID) FROM CUSTOMER GROUP BY GRADE HAVING GRADE > (SELECT AVG(GRADE) FROM CUSTOMER WHERE CITY='BANGALORE');

SELECT SALESMAN_ID,NAME FROM SALESMAN A WHERE 1<(SELECT COUNT(*) FROM CUSTOMER WHERE SALESMAN_ID=A.SALESMAN_ID);

SELECT SALESMAN.SALESMAN_ID,NAME,CUST_NAME,COMMISSION FROM SALESMAN,CUSTOMER WHERE SALESMAN.CITY=CUSTOMER.CITY 
UNION
SELECT SALESMAN_ID,NAME,'NO MATCH',COMMISSION FROM SALESMAN WHERE NOT CITY=ANY(SELECT CITY FROM CUSTOMER) ORDER BY 2 DESC;

CREATE VIEW ELITSALESMAN AS SELECT B.ORD_DATE,A.SALESMAN_ID,A.NAME FROM SALESMAN A,ORDERS B WHERE A.SALESMAN_ID=B.SALESMAN_ID AND B.PURCHASE_AMT=(SELECT MAX(PURCHASE_AMT) FROM ORDERS C WHERE C.ORD_DATE=B.ORD_DATE);
SELECT * FROM ELITSALESMAN;

DELETE FROM SALESMAN WHERE SALESMAN_ID=1234;
SELECT * FROM SALESMAN;



TABLE CREATION

CREATE TABLE ACTOR (
ACT_ID NUMBER (3),
ACT_NAME VARCHAR (20),
ACT_GENDER CHAR (1),
PRIMARY KEY (ACT_ID));

CREATE TABLE DIRECTOR (
DIR_ID NUMBER (3),
DIR_NAME VARCHAR (20),
DIR_PHONE NUMBER (10),
PRIMARY KEY (DIR_ID));

CREATE TABLE MOVIES (
MOV_ID NUMBER (4),
MOV_TITLE VARCHAR (25),
MOV_YEAR NUMBER (4),
MOV_LANG VARCHAR (12),
DIR_ID NUMBER (3),
PRIMARY KEY (MOV_ID),
FOREIGN KEY (DIR_ID) REFERENCES DIRECTOR (DIR_ID));

CREATE TABLE MOVIE_CAST (
ACT_ID NUMBER (3),
MOV_ID NUMBER (4),
ROLE VARCHAR (10),
PRIMARY KEY (ACT_ID, MOV_ID),
FOREIGN KEY (ACT_ID) REFERENCES ACTOR (ACT_ID),
FOREIGN KEY (MOV_ID) REFERENCES MOVIES (MOV_ID));

CREATE TABLE RATING (
MOV_ID NUMBER (4),
REV_STARS VARCHAR (25),
PRIMARY KEY (MOV_ID),
FOREIGN KEY (MOV_ID) REFERENCES MOVIES (MOV_ID));


RECORD INSERTION

INSERT INTO ACTOR VALUES (301,'ANUSHKA','F');
INSERT INTO ACTOR VALUES (302,'PRABHAS','M');
INSERT INTO ACTOR VALUES (303,'JAMES','M');
INSERT INTO ACTOR VALUES (304,'SMITH','M');

SELECT * FROM ACTOR;

INSERT INTO DIRECTOR VALUES (60,'RAJAMOULI', 8751611001);
INSERT INTO DIRECTOR VALUES (61,'HITCHCOCK', 7766138911);
INSERT INTO DIRECTOR VALUES (62,'FARAN', 9986776531);
INSERT INTO DIRECTOR VALUES (63,'STEVEN SPIELBERG', 8989776530);

SELECT * FROM DIRECTOR;
INSERT INTO MOVIES VALUES (1001,'BAHUBALI-2', 2017, 'TELUGU', 60);
INSERT INTO MOVIES VALUES (1002,'BAHUBALI-1', 2015, 'TELUGU', 60);
INSERT INTO MOVIES VALUES (1003,'VERTIGO', 1954, 'ENGLISH', 61);
INSERT INTO MOVIES VALUES (1004,'MEN IN BLACK', 2011, 'ENGLISH', 63);

SELECT * FROM MOVIES;
INSERT INTO MOVIE_CAST VALUES (301, 1002, 'HEROINE');
INSERT INTO MOVIE_CAST VALUES (301, 1001, 'HEROINE');
INSERT INTO MOVIE_CAST VALUES (302, 1002, 'HERO');
INSERT INTO MOVIE_CAST VALUES (303, 1003, 'GUEST');
INSERT INTO MOVIE_CAST VALUES (304, 1004, 'HERO');

SELECT * FROM MOVIE_CAST;

INSERT INTO RATING VALUES (1001, 4);
INSERT INTO RATING VALUES (1002, 2);
INSERT INTO RATING VALUES (1003, 5);
INSERT INTO RATING VALUES (1004, 4);

SELECT * FROM RATING

QUERIES 
1. List the titles of all movies directed by ‘Hitchcock’. 
SELECT MOV_TITLE
FROM MOVIES
WHERE DIR_ID IN (SELECT DIR_ID
FROM DIRECTOR
WHERE DIR_NAME = 'HITCHCOCK');

 

2. Find the movie names where one or more actors acted in two or more movies. 
SELECT MOV_TITLE
FROM MOVIES M, MOVIE_CAST MV
WHERE M.MOV_ID=MV.MOV_ID AND ACT_ID IN (SELECT ACT_ID
FROM MOVIE_CAST GROUP BY ACT_ID
HAVING COUNT (ACT_ID)>1)
GROUP BY MOV_TITLE
HAVING COUNT (*)>1;
3. List all actors who acted in a movie before 2000 and also in a movie after 2015 (use JOIN operation). 
SELECT ACT_NAME, MOV_TITLE, MOV_YEAR
FROM ACTOR A
JOIN MOVIE_CAST C
ON A.ACT_ID=C.ACT_ID
JOIN MOVIES M
ON C.MOV_ID=M.MOV_ID
WHERE M.MOV_YEAR NOT BETWEEN 2000 AND 2015; 

 

4. Find the title of movies and number of stars for each movie that has at least one rating and find the highest number of stars that movie received. Sort the result by movie title. 
SELECT MOV_TITLE, MAX (REV_STARS)
FROM MOVIES
INNER JOIN RATING USING (MOV_ID)
GROUP BY MOV_TITLE
HAVING MAX (REV_STARS)>0
ORDER BY MOV_TITLE; 

 

5. Update rating of all movies directed by ‘Steven Spielberg’ to 5.
UPDATE RATING
SET REV_STARS=5
WHERE MOV_ID IN (SELECT MOV_ID FROM MOVIES
WHERE DIR_ID IN (SELECT DIR_ID
FROM DIRECTOR
WHERE DIR_NAME = 'STEVEN SPIELBERG'));
 
SELECT * FROM RATING;
TABLE CREATION

CREATE TABLE STUDENT (
USN VARCHAR (10) PRIMARY KEY,
SNAME VARCHAR (25),
ADDRESS VARCHAR (25),
PHONE NUMBER (10),
GENDER CHAR (1));
	
CREATE TABLE SEMSEC (
SSID VARCHAR (5) PRIMARY KEY,
SEM NUMBER (2),
SEC CHAR (1));

CREATE TABLE CLASS (
USN VARCHAR (10),
SSID VARCHAR (5),
PRIMARY KEY (USN, SSID),
FOREIGN KEY (USN) REFERENCES STUDENT (USN),
FOREIGN KEY (SSID) REFERENCES SEMSEC (SSID));

CREATE TABLE SUBJECT (
SUBCODE VARCHAR (8),
TITLE VARCHAR (20),
SEM NUMBER (2),
CREDITS NUMBER (2),
PRIMARY KEY (SUBCODE));

CREATE TABLE IAMARKS (
USN VARCHAR (10),
SUBCODE VARCHAR (8),
SSID VARCHAR (5),
TEST1 NUMBER (2),
TEST2 NUMBER (2),
TEST3 NUMBER (2),
FINALIA NUMBER (2),
PRIMARY KEY (USN, SUBCODE, SSID),
FOREIGN KEY (USN) REFERENCES STUDENT (USN),
FOREIGN KEY (SUBCODE) REFERENCES SUBJECT (SUBCODE),
FOREIGN KEY (SSID) REFERENCES SEMSEC (SSID));


RECORD INSERTION

INSERT INTO STUDENT VALUES 
('1DA15CS001','AJAY','TUMKUR', 9845091341,'M');
INSERT INTO STUDENT VALUES ('1DA15CS091','CHITRA','DAVANGERE',7696772121,'F');
INSERT INTO STUDENT VALUES 
('1DA15CS101','JEEVA','BELLARY', 9944850121,'M');
INSERT INTO STUDENT VALUES ('1DA19CS045','AKASH','BENGALURU',9900211201,'M');
INSERT INTO STUDENT VALUES ('1DA19CS088','BHASKAR','BENGALURU',9923211099,'M');
INSERT INTO STUDENT VALUES 
('1DA19CS122','ASMI','BENGALURU', 7894737377,'F');
INSERT INTO STUDENT VALUES ('1DA19CS181','SANTOSH','MANGALURU',8812332201,'M');

SELECT * FROM STUDENT;

 

INSERT INTO SEMSEC VALUES ('CSE6A', 6,'A');
INSERT INTO SEMSEC VALUES ('CSE6B', 6,'B');
INSERT INTO SEMSEC VALUES ('CSE6C', 6,'C');

INSERT INTO SEMSEC VALUES ('CSE4A', 4,'A');
INSERT INTO SEMSEC VALUES ('CSE4B', 4,'B');
INSERT INTO SEMSEC VALUES ('CSE4C', 4,'C');

SELECT * FROM SEMSEC;

 

INSERT INTO CLASS VALUES ('1DA15CS001','CSE6A');
INSERT INTO CLASS VALUES ('1DA15CS091','CSE6B');
INSERT INTO CLASS VALUES ('1DA15CS101','CSE6C');

INSERT INTO CLASS VALUES ('1DA19CS045','CSE4A');
INSERT INTO CLASS VALUES ('1DA19CS088','CSE4B');
INSERT INTO CLASS VALUES ('1DA19CS122','CSE4C');
INSERT INTO CLASS VALUES ('1DA19CS181','CSE4C');

SELECT * FROM CLASS;

 

INSERT INTO SUBJECT VALUES ('15CS61', 'ME', 6, 4);
INSERT INTO SUBJECT VALUES ('15CS62','CN', 6, 4);
INSERT INTO SUBJECT VALUES ('15CS63','DBMS', 6, 4);
INSERT INTO SUBJECT VALUES ('15CS64','JAVA', 6, 3);

INSERT INTO SUBJECT VALUES ('15CS41','M4', 4, 4);
INSERT INTO SUBJECT VALUES ('15CS42','SE', 4, 4);
INSERT INTO SUBJECT VALUES ('15CS43','MPMC', 4, 4);
INSERT INTO SUBJECT VALUES ('15CS44','OOOPS', 4, 3);

SELECT * FROM SUBJECT;

 

INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES
('1DA15CS101','15CS61','CSE6C', 15, 16, 18);
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES
('1DA15CS101','15CS62','CSE6C', 12, 19, 14);
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES
('1DA15CS101','15CS63','CSE6C', 19, 15, 20);
INSERT INTO IAMARKS (USN, SUBCODE, SSID, TEST1, TEST2, TEST3) VALUES
('1DA15CS101','15CS64','CSE6C', 20, 16, 19);

SELECT * FROM IAMARKS;

 

QUERIES 

1. List all the student details studying in fourth semester ‘C’section. 
SELECT S.*, SS.SEM, SS.SEC
FROM STUDENT S, SEMSEC SS, CLASS C
WHERE S.USN = C.USN AND
SS.SSID = C.SSID AND
SS.SEM = 4 AND SS.SEC='C';

 

2. Compute the total number of male and female students in each semester and in each section. 
SELECT SS.SEM, SS.SEC, S.GENDER, COUNT (S.GENDER) AS COUNT
FROM STUDENT S, SEMSEC SS, CLASS C
WHERE S.USN = C.USN AND
SS.SSID = C.SSID
GROUP BY SS.SEM, SS.SEC, S.GENDER
ORDER BY SEM;

 

3. Create a view of Test1 marks of student USN ‘1DA15CS101’ in all subjects. 
CREATE VIEW STU_TEST1_MARKS_VIEW
AS
SELECT TEST1, SUBCODE
FROM IAMARKS
WHERE USN = '1DA15CS101';

 
 

4. Calculate the FinalCIE (average of best two test marks) and update the corresponding table for all students. 
CREATE OR REPLACE PROCEDURE AVGMARKS
IS
CURSOR C_IAMARKS IS
SELECT GREATEST(TEST1,TEST2) AS A, GREATEST(TEST1,TEST3) AS B,
GREATEST(TEST3,TEST2) AS C
FROM IAMARKS
WHERE FINALIA IS NULL
FOR UPDATE;
 C_A NUMBER;
 C_B NUMBER;
 C_C NUMBER;
 C_SM NUMBER;
 C_AV NUMBER;
BEGIN
 OPEN C_IAMARKS;
 LOOP
 FETCH C_IAMARKS INTO C_A, C_B, C_C;
 EXIT WHEN C_IAMARKS%NOTFOUND;
 --DBMS_OUTPUT.PUT_LINE(C_A || ' ' || C_B || ' ' || C_C);
 IF (C_A != C_B) THEN
C_SM:=C_A+C_B;
 ELSE
C_SM:=C_A+C_C;
 END IF;
 C_AV:=C_SM/2;
 --DBMS_OUTPUT.PUT_LINE('SUM = '||C_SM);
 --DBMS_OUTPUT.PUT_LINE('AVERAGE = '||C_AV);
 UPDATE IAMARKS SET FINALIA=C_AV WHERE CURRENT OF C_IAMARKS;
 END LOOP;
 CLOSE C_IAMARKS;
END;

BEGIN
AVGMARKS;
END;

SELECT * FROM IAMARKS;

  

5. Categorize students based on the following criterion: 
If FinalCIE = 17 to 20 then CAT = ‘Outstanding’ 
If FinalCIE< 12 then CAT = ‘Weak’
If FinalCIE = 12 to 16 then CAT = ‘Average’
Give these details only for 8th semester A, B, and C section students.

SELECT S.USN,S.SNAME,S.ADDRESS,S.PHONE,S.GENDER,
 (CASE
 WHEN IA.FINALIA BETWEEN 17 AND 20 THEN 'OUTSTANDING'
 WHEN IA.FINALIA BETWEEN 12 AND 16 THEN 'AVERAGE'
 ELSE 'WEAK'
 END) AS CAT
FROM STUDENT S, SEMSEC SS, IAMARKS IA, SUBJECT SUB
WHERE S.USN = IA.USN AND
SS.SSID = IA.SSID AND
SUB.SUBCODE = IA.SUBCODE AND
SUB.SEM = 8;






